name: terraform-then-eks-deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_DIR: iac
  K8S_DIR: k8s

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect changed files
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            tf:
              - 'iac/**'
            k8s:
              - 'k8s/**'

      # Fallback to static AWS keys if no role is provided
      - name: Configure AWS credentials (static keys)
        if: ${{ secrets.AWS_ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # === Terraform: only when tf/ changed ===
      - name: Setup Terraform CLI
        if: ${{ steps.changes.outputs.tf == 'true' }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Terraform init
        if: ${{ steps.changes.outputs.tf == 'true' }}
        working-directory: ${{ env.TF_DIR }}
        run: terraform init -input=false

      - name: Terraform validate and plan
        if: ${{ steps.changes.outputs.tf == 'true' }}
        working-directory: ${{ env.TF_DIR }}
        run: |
          terraform validate
          terraform plan -out=tfplan -input=false

      - name: Terraform apply
        if: ${{ steps.changes.outputs.tf == 'true' }}
        working-directory: ${{ env.TF_DIR }}
        run: terraform apply -auto-approve -input=false tfplan

      # === Kubernetes deploy: only when k8s/ changed ===
      - name: Install kubectl
        if: ${{ steps.changes.outputs.k8s == 'true' }}
        uses: azure/setup-kubectl@v3
        with:
          version: '1.27.3'

      - name: Update kubeconfig for EKS cluster
        if: ${{ steps.changes.outputs.k8s == 'true' }}
        run: |
          aws eks update-kubeconfig --region "${{ env.AWS_REGION }}" --name "${{ env.EKS_CLUSTER_NAME }}"

      - name: Apply selected Kubernetes manifests (nginx + loadbalancer)
        if: ${{ steps.changes.outputs.k8s == 'true' }}
        working-directory: ${{ env.K8S_DIR }}
        run: |
          kubectl apply -f nginx.yaml -f loadbalancer.yaml

      - name: Wait for nginx rollout (best-effort)
        if: ${{ steps.changes.outputs.k8s == 'true' }}
        run: |
          kubectl rollout status deployment/nginx --timeout=180s || echo "nginx deployment not found or rollout timed out; continuing."

      - name: List applied resources (diagnostics)
        if: ${{ steps.changes.outputs.k8s == 'true' }}
        run: |
          echo "=== Services ==="
          kubectl get svc --selector='app=nginx' -o wide || true
          echo
          echo "=== Deployments ==="
          kubectl get deploy --selector='app=nginx' -o wide || true